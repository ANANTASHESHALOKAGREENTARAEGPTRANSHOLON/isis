buildscript {

    ext.production = (findProperty('prod') ?: 'false') == 'true'

    repositories {
        maven { url = "http://bintray.com/" }
        maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://kotlin.bintray.com/kotlinx' }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:${frontendPluginVersion}"
    }
}

plugins {
    id "com.moowork.grunt" version "1.2.0"
}

apply plugin: 'kotlin2js'
if (production) {
    apply plugin: 'kotlin-dce-js'
}
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'

repositories {
    maven { url = "http://bintray.com/" }
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url = 'https://kotlin.bintray.com/kotlinx' }
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-js-wrappers' }
    maven { url = 'https://dl.bintray.com/gbaldeck/kotlin' }
    maven { url = 'https://dl.bintray.com/rjaros/kotlin' }
    maven { url = 'https://plugins.gradle.org/m2/' }
    maven {
        url = uri("https://dl.bintray.com/gbaldeck/kotlin")
        metadataSources {
            artifact()
        }
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlinVersion}"
    compile "pl.treksoft:kvision:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-css:${kvisionVersion}"
    compile "pl.treksoft:kvision-fontawesome:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-select:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-datetime:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-spinner:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-upload:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap-dialog:${kvisionVersion}"
    compile "pl.treksoft:kvision-richtext:${kvisionVersion}"
    compile "pl.treksoft:kvision-handlebars:${kvisionVersion}"
    compile "pl.treksoft:kvision-i18n:${kvisionVersion}"
    compile "pl.treksoft:kvision-datacontainer:${kvisionVersion}"
    compile "pl.treksoft:kvision-chart:${kvisionVersion}"
    compile "pl.treksoft:kvision-tabulator:${kvisionVersion}"
    compile "pl.treksoft:kvision-moment:${kvisionVersion}"
    compile "pl.treksoft:kvision-pace:${kvisionVersion}"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:${kotlinVersion}"
    testCompile "pl.treksoft:kvision-testutils:${kvisionVersion}:tests"
}

kotlinFrontend {
    sourceMaps = true
    webpackBundle {
        bundleName = "main"
        sourceMapEnabled = false
        contentPath = file('src/main/web')
        mode = production ? "production" : "development"
    }
    define "PRODUCTION", production
}

compileKotlin2Js {
    kotlinOptions {
        metaInfo = true
        outputFile = "$project.buildDir.path/js/${project.name}.js"
        sourceMap = !production
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
    }
}

compileTestKotlin2Js {
    kotlinOptions {
        metaInfo = true
        outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
        sourceMap = !production
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
    }
}

task pot(type: GruntTask) {
    args = ["pot"]
}

pot.dependsOn 'installGrunt'
pot.dependsOn 'npmInstall'


task copyResources(type: Copy) {
    from "src/main/resources"
    into file(buildDir.path + "/js")
}

task copyResourcesForDce() {
    doLast {
        copy {
            from "src/main/resources"
            ext.modulesDir = new File("${buildDir.path}/node_modules_imported/")
            modulesDir.eachDir {
                if (it.name.startsWith("kvision")) {
                    from(it) {
                        include "css/**"
                        include "img/**"
                        include "js/**"
                    }
                }
            }
            into file(buildDir.path + "/kotlin-js-min/main")
        }
    }
}

task dist(type: Copy, dependsOn: 'bundle') {
    from "src/main/web"
    from "${buildDir.path}/bundle"
    into file(buildDir.path + "/distributions/" + project.name)
}

task distZip(type: Zip, dependsOn: 'dist') {
    from(buildDir.path + "/distributions/" + project.name)
}

afterEvaluate {
    if (production) {
        tasks.getByName("copyResourcesForDce") { dependsOn(runDceKotlinJs) }
    }
    tasks.getByName("webpack-bundle") {
        dependsOn(copyResources, copyResourcesForDce)
    }
    tasks.getByName("webpack-run") { dependsOn(copyResources) }
    tasks.getByName("karma-start") { dependsOn(copyResources) }
}
